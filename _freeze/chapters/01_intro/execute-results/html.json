{
  "hash": "9fd57577e154c0d961fb8d3f14625db0",
  "result": {
    "engine": "knitr",
    "markdown": "# Introduction\n\n### Q1.1 \n\nGenerate a random sample $x_1, \\ldots, x_{100}$ of data from the $t_4$ (df=4) distribution using the `rt` function.  Use the `MASS::truehist` function to display a probability histogram of the sample.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nx <- rt(n=100, df=4)\nMASS::truehist(x, las=1, col=\"#118ab2\", border=\"grey80\", nbins=20)\n```\n\n::: {.cell-output-display}\n![](01_intro_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n### Q1.2 \n\nAdd the $t_4$ density curve (`dt`) to your histogram in Exercise 1.1 using the `curve` function with `add=TRUE`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMASS::truehist(x, las=1, col=\"#118ab2\", border=\"grey80\", nbins=20)\ncurve(dt(x, df=4), from=-4, to=4, add=T, type=\"l\")\n```\n\n::: {.cell-output-display}\n![](01_intro_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n### Q1.3 \n\nAdd an estimated density curve to your histogram in Exercise 1.2 using `density`. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMASS::truehist(x, las=1, col=\"#118ab2\", border=\"grey80\", nbins=20)\ncurve(dt(x, df=4), from=-4, to=4, add=T, type=\"l\")\nlines(density(x), col=\"firebrick\", lwd=2)\n```\n\n::: {.cell-output-display}\n![](01_intro_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n### Q1.4a \n\nWrite an R function `f` in R to implement the function $f(x) = (x-a)/b$ that will transform an imput vector $x$ and return the result. The function should take three input arguments: `x`, `a`, and `b`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(x, a, b) (x-a)/b\n```\n:::\n\n\n\n\n\n\n\n### Q1.4b \n\nTo transform $x$ to the interval $[0,1]$ we subtract the minimum value and divice by the range: `y <- f(x, a=min(x), b=max(x)-min(x))`. Generate a random sample of a Normal($\\mu=2$, $\\sigma=2$) data using `rnorm` and use your function `f` to transform this sample to the interval $[0,1]$. Print a `summary` of both the sample `x` and the transformed sample `y` to check the result.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nx <- rnorm(100, mean=2, sd=2)\ny <- f(x, min(x), max(x)-min(x))\nsummary(data.frame(x=x, y=y))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       x                 y         \n Min.   :-2.6914   Min.   :0.0000  \n 1st Qu.: 0.2093   1st Qu.:0.2963  \n Median : 1.2307   Median :0.4007  \n Mean   : 1.6865   Mean   :0.4472  \n 3rd Qu.: 2.9424   3rd Qu.:0.5755  \n Max.   : 7.0980   Max.   :1.0000  \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n### Q1.5\n\nRefer to Exercise 1.4. Suppose that we want to transform the `x` sample so that it has mean zero and standard deviation one (_studentize_ the sample). That is, we want $z_i - (x_i-\\bar{x})/s$ for $i=1,\\ldots,n$, where $s$ is that standard deviation of the sample. Using your function `f` this is `z <- f(x, a=mean(x), b=sd(x))`. Display a summary and histogram of the studentized sample `z`. It should be centered exactly at zero. Use `sd(z)` to check that the studentized sample has standard deviation exactly 1.0.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- f(x, a=mean(x), b=sd(x))\nround(mean(z),10); round(sd(z),10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n### Q1.6\n\nUsing your function `f` of Exercise 1.4, center and scale your Normal($\\mu=2$, $\\sigma=2$) sample by subtracting the sample median and dividing by the sample interquartile range (`IQR`). \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- f(x, a=median(x), b=IQR(x))\nplot(z, y, pch=20)\n```\n\n::: {.cell-output-display}\n![](01_intro_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n### Q1.7\n\nRefer to Example 1.14 where we displayed an arrach of scatterplots using `ggplot` with `facet_wrap`. One of the variables in the `mpg` data is `drv`, a characer vector indicating whether the vehicle is front-wheel drive, real-wheel drive, or four-wheel drive. Add `color=drv` in `aes`: `aes(displ, hwy, color=drv)` and display the revised plot. Your scatterplots should now have automatically generated a legend for `drv` color.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nmpg |>\n    ggplot() + \n    geom_point(aes(displ, hwy, color=drv)) + \n    facet_wrap(~class)\n```\n\n::: {.cell-output-display}\n![](01_intro_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n### Q1.8\n\nThis exercise is intented to serve as an introduction to report writing with R Markdown. Install the _knitr_ package if it is not installed. Create an html report using R Markdown and knitr in RStudio. The report whould include the code and output of Examples 1.12 and 1.14 with appropriate headings and a brief explanation o feach example.\n\n_Solution Omitted._",
    "supporting": [
      "01_intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}